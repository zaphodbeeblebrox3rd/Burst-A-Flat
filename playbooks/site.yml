---
- name: Configure Slurm Cluster
  hosts: all
  become: yes
  gather_facts: yes
    
  pre_tasks:
    - name: Update package cache and upgrade packages
      ansible.builtin.apt:
        update_cache: yes
        upgrade: yes
        autoremove: yes
      retries: 3
      delay: 90

  roles:
    - role: common
    - role: munge
    - role: slurm

- name: Configure Slurm Controller
  hosts: slurm_controllers
  become: yes
  roles:
    - role: slurm_controller

- name: Configure Slurm Compute Nodes
  hosts: slurm_computes
  become: yes
  roles:
    - role: slurm_compute
    - role: r_environment

- name: Configure NFS Server
  hosts: nfs_servers
  become: yes
  roles:
    - role: nfs_server

- name: Configure Router
  hosts: management-node
  become: yes
  roles:
    - role: router

- name: Configure Network Routes
  hosts: all
  become: yes
  roles:
    - role: network_config

- name: Configure NFS Clients
  hosts: nfs_clients
  become: yes
  roles:
    - role: nfs_client

- name: Configure R Environment on Login Node
  hosts: slurm_login
  become: yes
  roles:
    - role: r_environment

- name: Configure MariaDB for SlurmDB
  hosts: slurmdb
  become: yes
  roles:
    - role: mariadb_server
    - role: slurmdb

- name: Configure MongoDB Primary
  hosts: mongodb_primary
  become: yes
  roles:
    - role: mongodb_primary

- name: Configure MongoDB Replica
  hosts: mongodb_replica
  become: yes
  roles:
    - role: mongodb_replica

- name: Final cluster configuration
  hosts: all
  become: yes
  tasks:
    - name: Generate shared SSH key pair for internal node communication
      ansible.builtin.shell: |
        ssh-keygen -t ed25519 -f /home/vagrant/.ssh/id_ed25519_internal -N "" -C "internal-cluster-key"
      args:
        creates: /home/vagrant/.ssh/id_ed25519_internal
      when: inventory_hostname == groups['slurm_controllers'][0]

    - name: Set proper permissions on shared SSH key files
      ansible.builtin.file:
        path: "{{ item }}"
        owner: vagrant
        group: vagrant
        mode: "{{ '0600' if item.endswith('id_ed25519_internal') else '0644' }}"
      loop:
        - /home/vagrant/.ssh/id_ed25519_internal
        - /home/vagrant/.ssh/id_ed25519_internal.pub
      when: inventory_hostname == groups['slurm_controllers'][0]

    - name: Copy shared SSH keys to all nodes
      ansible.builtin.copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: vagrant
        group: vagrant
        mode: "{{ item.mode }}"
        remote_src: yes
      loop:
        - { src: "/home/vagrant/.ssh/id_ed25519_internal", dest: "/home/vagrant/.ssh/id_ed25519_internal", mode: "0600" }
        - { src: "/home/vagrant/.ssh/id_ed25519_internal.pub", dest: "/home/vagrant/.ssh/id_ed25519_internal.pub", mode: "0644" }
      when: inventory_hostname != groups['slurm_controllers'][0]
      delegate_to: "{{ groups['slurm_controllers'][0] }}"

    - name: Read shared public key content for authorized_keys
      ansible.builtin.shell: |
        cat /home/vagrant/.ssh/id_ed25519_internal.pub
      when: inventory_hostname == groups['slurm_controllers'][0]
      register: shared_public_key

    - name: Add shared public key to authorized_keys on all nodes
      ansible.builtin.authorized_key:
        user: vagrant
        key: "{{ shared_public_key.stdout }}"
        state: present

    - name: Configure SSH to use internal key by default
      ansible.builtin.blockinfile:
        path: /home/vagrant/.ssh/config
        create: yes
        owner: vagrant
        group: vagrant
        mode: '0600'
        block: |
          Host *
            IdentityFile ~/.ssh/id_ed25519_internal
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null

    - name: Start and enable Slurm services
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: started
        enabled: yes
      loop: "{{ slurm_services }}"
      vars:
        slurm_services: >-
          {%- if inventory_hostname in groups['slurm_controllers'] -%}
            {{ ['munge', 'slurmd', 'slurmctld'] }}
          {%- elif inventory_hostname in groups['slurm_computes'] -%}
            {{ ['munge', 'slurmd'] }}
          {%- else -%}
            {{ [] }}
          {%- endif -%}
      when: slurm_services | length > 0

    - name: Create shared home directory structure
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: vagrant
        group: vagrant
        mode: '0755'
      loop:
        - /home/vagrant/shared
        - /home/vagrant/shared/data
        - /home/vagrant/shared/scripts
        - /home/vagrant/shared/results
      when: inventory_hostname in groups['slurm_login']

    - name: Set up SSH keys for passwordless access
      ansible.builtin.authorized_key:
        user: vagrant
        key: "{{ ssh_public_key }}"
        state: present
      when: ssh_public_key != ''

    - name: Copy sample data generation script
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/../scripts/generate_sample_data.R"
        dest: /home/vagrant/shared/scripts/generate_sample_data.R
        owner: vagrant
        group: vagrant
        mode: '0755'
      when: inventory_hostname in groups['slurm_login']

    - name: Copy R workload demo script
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/../scripts/r_workload_demo.sh"
        dest: /home/vagrant/shared/scripts/r_workload_demo.sh
        owner: vagrant
        group: vagrant
        mode: '0755'
      when: inventory_hostname in groups['slurm_login']

    - name: Generate sample data
      ansible.builtin.shell: |
        cd /home/vagrant/shared/scripts
        Rscript generate_sample_data.R
      become_user: vagrant
      when: inventory_hostname in groups['slurm_login']
      register: sample_data_result
      changed_when: sample_data_result.rc == 0

    - name: Display sample data generation results
      ansible.builtin.debug:
        msg: "Sample data generated successfully in /home/vagrant/shared/data/"
      when:
        - inventory_hostname in groups['slurm_login']
        - sample_data_result.rc == 0

    - name: Validate Slurm cluster is operational
      ansible.builtin.shell: |
        sinfo --format="%.10N %.5D %.6t %.10M %.6D %R" --noheader
      register: sinfo_output
      delegate_to: "{{ groups['slurm_login'][0] }}"
      failed_when: sinfo_output.rc != 0
      changed_when: false

    - name: Display cluster validation results
      ansible.builtin.debug:
        msg: |
          âœ… Slurm cluster validation successful!
          
          Cluster Status:
          {{ sinfo_output.stdout }}
          
          Cluster setup complete!
          Login to the cluster: vagrant ssh login-node
          Check cluster status: sinfo
          Submit a job: sbatch /home/vagrant/shared/scripts/r_workload_demo.sh
